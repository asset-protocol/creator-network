/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AssetTokenConfigStruct = {
  exist: boolean;
  token: AddressLike;
  recipient: AddressLike;
  createFee: BigNumberish;
  updateFee: BigNumberish;
  collectFee: BigNumberish;
};

export type AssetTokenConfigStructOutput = [
  exist: boolean,
  token: string,
  recipient: string,
  createFee: bigint,
  updateFee: bigint,
  collectFee: bigint
] & {
  exist: boolean;
  token: string;
  recipient: string;
  createFee: bigint;
  updateFee: bigint;
  collectFee: bigint;
};

export type CurationTokenFeeConfigStruct = {
  createFee: BigNumberish;
  updateFee: BigNumberish;
  collectFee: BigNumberish;
};

export type CurationTokenFeeConfigStructOutput = [
  createFee: bigint,
  updateFee: bigint,
  collectFee: bigint
] & { createFee: bigint; updateFee: bigint; collectFee: bigint };

export type CurationAssetStruct = { hub: AddressLike; assetId: BigNumberish };

export type CurationAssetStructOutput = [hub: string, assetId: bigint] & {
  hub: string;
  assetId: bigint;
};

export type AssetTokenFeeConfigStruct = {
  exist: boolean;
  createFee: BigNumberish;
  updateFee: BigNumberish;
  collectFee: BigNumberish;
};

export type AssetTokenFeeConfigStructOutput = [
  exist: boolean,
  createFee: bigint,
  updateFee: bigint,
  collectFee: bigint
] & {
  exist: boolean;
  createFee: bigint;
  updateFee: bigint;
  collectFee: bigint;
};

export declare namespace DataTypes {
  export type AssetCreateDataStruct = {
    publisher: AddressLike;
    contentURI: string;
    assetCreateModuleData: BytesLike;
    collectModule: AddressLike;
    collectModuleInitData: BytesLike;
    gatedModule: AddressLike;
    gatedModuleInitData: BytesLike;
  };

  export type AssetCreateDataStructOutput = [
    publisher: string,
    contentURI: string,
    assetCreateModuleData: string,
    collectModule: string,
    collectModuleInitData: string,
    gatedModule: string,
    gatedModuleInitData: string
  ] & {
    publisher: string;
    contentURI: string;
    assetCreateModuleData: string;
    collectModule: string;
    collectModuleInitData: string;
    gatedModule: string;
    gatedModuleInitData: string;
  };
}

export interface TokenGlobalModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "_curation"
      | "assetHubConfig"
      | "curationConfig"
      | "initialize"
      | "manager"
      | "onCollectAsset"
      | "onCreateAsset"
      | "onCurationCollect"
      | "onCurationCreate"
      | "onUpdateAsset"
      | "proxiableUUID"
      | "setAssetCollectFee"
      | "setAssetCreateFee"
      | "setAssetDefaultConfig"
      | "setAssetHubConfig"
      | "setAssetUpdateFee"
      | "setCurationCollectFee"
      | "setCurationConfig"
      | "setCurationCreateFee"
      | "setCurationUpdateFee"
      | "setRecipient"
      | "setToken"
      | "supportsInterface"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RecipientChanged"
      | "TokenChanged"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_curation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetHubConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "curationConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onCollectAsset",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onCreateAsset",
    values: [AddressLike, BigNumberish, DataTypes.AssetCreateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onCurationCollect",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onCurationCreate",
    values: [
      BigNumberish,
      AddressLike,
      string,
      BigNumberish,
      CurationAssetStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onUpdateAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetCollectFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetCreateFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetDefaultConfig",
    values: [AssetTokenFeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetHubConfig",
    values: [AddressLike, AssetTokenFeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetUpdateFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurationCollectFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurationConfig",
    values: [CurationTokenFeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurationCreateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurationUpdateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_curation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetHubConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onCollectAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCreateAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCurationCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCurationCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onUpdateAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetCollectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetCreateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetDefaultConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetHubConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetUpdateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurationCollectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurationCreateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurationUpdateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientChangedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenChangedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenGlobalModule extends BaseContract {
  connect(runner?: ContractRunner | null): TokenGlobalModule;
  waitForDeployment(): Promise<this>;

  interface: TokenGlobalModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  _curation: TypedContractMethod<[], [string], "view">;

  assetHubConfig: TypedContractMethod<
    [hub: AddressLike],
    [AssetTokenConfigStructOutput],
    "view"
  >;

  curationConfig: TypedContractMethod<
    [],
    [CurationTokenFeeConfigStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [manager: AddressLike, token: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  onCollectAsset: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: AddressLike,
      collector: AddressLike,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;

  onCreateAsset: TypedContractMethod<
    [
      publisher: AddressLike,
      arg1: BigNumberish,
      arg2: DataTypes.AssetCreateDataStruct
    ],
    [void],
    "payable"
  >;

  onCurationCollect: TypedContractMethod<
    [
      curationId: BigNumberish,
      publiser: AddressLike,
      collector: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  onCurationCreate: TypedContractMethod<
    [
      arg0: BigNumberish,
      publisher: AddressLike,
      arg2: string,
      arg3: BigNumberish,
      arg4: CurationAssetStruct[]
    ],
    [void],
    "payable"
  >;

  onUpdateAsset: TypedContractMethod<
    [publisher: AddressLike, arg1: BigNumberish],
    [void],
    "payable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  setAssetCollectFee: TypedContractMethod<
    [hub: AddressLike, collectFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAssetCreateFee: TypedContractMethod<
    [hub: AddressLike, createFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAssetDefaultConfig: TypedContractMethod<
    [feeConfig: AssetTokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;

  setAssetHubConfig: TypedContractMethod<
    [hub: AddressLike, feeConfig: AssetTokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;

  setAssetUpdateFee: TypedContractMethod<
    [hub: AddressLike, updateFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCurationCollectFee: TypedContractMethod<
    [collectFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCurationConfig: TypedContractMethod<
    [feeConfig: CurationTokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;

  setCurationCreateFee: TypedContractMethod<
    [createFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCurationUpdateFee: TypedContractMethod<
    [updateFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRecipient: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_curation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetHubConfig"
  ): TypedContractMethod<
    [hub: AddressLike],
    [AssetTokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "curationConfig"
  ): TypedContractMethod<[], [CurationTokenFeeConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [manager: AddressLike, token: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onCollectAsset"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: AddressLike,
      collector: AddressLike,
      arg3: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onCreateAsset"
  ): TypedContractMethod<
    [
      publisher: AddressLike,
      arg1: BigNumberish,
      arg2: DataTypes.AssetCreateDataStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onCurationCollect"
  ): TypedContractMethod<
    [
      curationId: BigNumberish,
      publiser: AddressLike,
      collector: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onCurationCreate"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      publisher: AddressLike,
      arg2: string,
      arg3: BigNumberish,
      arg4: CurationAssetStruct[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onUpdateAsset"
  ): TypedContractMethod<
    [publisher: AddressLike, arg1: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAssetCollectFee"
  ): TypedContractMethod<
    [hub: AddressLike, collectFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetCreateFee"
  ): TypedContractMethod<
    [hub: AddressLike, createFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetDefaultConfig"
  ): TypedContractMethod<
    [feeConfig: AssetTokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetHubConfig"
  ): TypedContractMethod<
    [hub: AddressLike, feeConfig: AssetTokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetUpdateFee"
  ): TypedContractMethod<
    [hub: AddressLike, updateFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCurationCollectFee"
  ): TypedContractMethod<[collectFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurationConfig"
  ): TypedContractMethod<
    [feeConfig: CurationTokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCurationCreateFee"
  ): TypedContractMethod<[createFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurationUpdateFee"
  ): TypedContractMethod<[updateFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRecipient"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientChanged"
  ): TypedContractEvent<
    RecipientChangedEvent.InputTuple,
    RecipientChangedEvent.OutputTuple,
    RecipientChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokenChanged"
  ): TypedContractEvent<
    TokenChangedEvent.InputTuple,
    TokenChangedEvent.OutputTuple,
    TokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RecipientChanged(address)": TypedContractEvent<
      RecipientChangedEvent.InputTuple,
      RecipientChangedEvent.OutputTuple,
      RecipientChangedEvent.OutputObject
    >;
    RecipientChanged: TypedContractEvent<
      RecipientChangedEvent.InputTuple,
      RecipientChangedEvent.OutputTuple,
      RecipientChangedEvent.OutputObject
    >;

    "TokenChanged(address)": TypedContractEvent<
      TokenChangedEvent.InputTuple,
      TokenChangedEvent.OutputTuple,
      TokenChangedEvent.OutputObject
    >;
    TokenChanged: TypedContractEvent<
      TokenChangedEvent.InputTuple,
      TokenChangedEvent.OutputTuple,
      TokenChangedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
