/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CurationAssetStruct = { hub: AddressLike; assetId: BigNumberish };

export type CurationAssetStructOutput = [hub: string, assetId: bigint] & {
  hub: string;
  assetId: bigint;
};

export type AssetInfoStruct = {
  hub: AddressLike;
  assetId: BigNumberish;
  expiry: BigNumberish;
  status: BigNumberish;
};

export type AssetInfoStructOutput = [
  hub: string,
  assetId: bigint,
  expiry: bigint,
  status: bigint
] & { hub: string; assetId: bigint; expiry: bigint; status: bigint };

export type CurationDataStruct = {
  assets: AssetInfoStruct[];
  tokenURI: string;
  status: BigNumberish;
  expiry: BigNumberish;
};

export type CurationDataStructOutput = [
  assets: AssetInfoStructOutput[],
  tokenURI: string,
  status: bigint,
  expiry: bigint
] & {
  assets: AssetInfoStructOutput[];
  tokenURI: string;
  status: bigint;
  expiry: bigint;
};

export interface CurationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "addAssets"
      | "approve"
      | "approveAsset"
      | "approveAssetBatch"
      | "assetsStatus"
      | "balanceOf"
      | "create"
      | "curationData"
      | "getApproved"
      | "initialize"
      | "isApprovedForAll"
      | "name"
      | "owner"
      | "ownerOf"
      | "proxiableUUID"
      | "removeAssets"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setCurationURI"
      | "setExpiry"
      | "setStatus"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "AssetApproved"
      | "AssetsAdded"
      | "AssetsRemoved"
      | "CurationCreated"
      | "CurationUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "Transfer"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAssets",
    values: [BigNumberish, CurationAssetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAsset",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAssetBatch",
    values: [BigNumberish, AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assetsStatus",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [string, BigNumberish, BigNumberish, CurationAssetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "curationData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssets",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurationURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveAssetBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetsStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurationURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExpiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetApprovedEvent {
  export type InputTuple = [
    curationId: BigNumberish,
    hub: AddressLike,
    assetId: BigNumberish,
    status: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    curationId: bigint,
    hub: string,
    assetId: bigint,
    status: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    curationId: bigint;
    hub: string;
    assetId: bigint;
    status: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetsAddedEvent {
  export type InputTuple = [
    curationId: BigNumberish,
    assets: CurationAssetStruct[]
  ];
  export type OutputTuple = [
    curationId: bigint,
    assets: CurationAssetStructOutput[]
  ];
  export interface OutputObject {
    curationId: bigint;
    assets: CurationAssetStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetsRemovedEvent {
  export type InputTuple = [
    curationId: BigNumberish,
    hubs: AddressLike[],
    assetIds: BigNumberish[]
  ];
  export type OutputTuple = [
    curationId: bigint,
    hubs: string[],
    assetIds: bigint[]
  ];
  export interface OutputObject {
    curationId: bigint;
    hubs: string[];
    assetIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurationCreatedEvent {
  export type InputTuple = [
    publisher: AddressLike,
    curationId: BigNumberish,
    curationURI: string,
    status: BigNumberish,
    expiry: BigNumberish,
    assets: CurationAssetStruct[]
  ];
  export type OutputTuple = [
    publisher: string,
    curationId: bigint,
    curationURI: string,
    status: bigint,
    expiry: bigint,
    assets: CurationAssetStructOutput[]
  ];
  export interface OutputObject {
    publisher: string;
    curationId: bigint;
    curationURI: string;
    status: bigint;
    expiry: bigint;
    assets: CurationAssetStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurationUpdatedEvent {
  export type InputTuple = [
    curationId: BigNumberish,
    curationURI: string,
    status: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    curationId: bigint,
    curationURI: string,
    status: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    curationId: bigint;
    curationURI: string;
    status: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Curation extends BaseContract {
  connect(runner?: ContractRunner | null): Curation;
  waitForDeployment(): Promise<this>;

  interface: CurationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addAssets: TypedContractMethod<
    [curationId: BigNumberish, assets: CurationAssetStruct[]],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveAsset: TypedContractMethod<
    [
      id: BigNumberish,
      hub: AddressLike,
      assetId: BigNumberish,
      status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  approveAssetBatch: TypedContractMethod<
    [
      id: BigNumberish,
      hubs: AddressLike[],
      assetIds: BigNumberish[],
      status: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  assetsStatus: TypedContractMethod<
    [curationId: BigNumberish, hubs: AddressLike[], assetIds: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  create: TypedContractMethod<
    [
      curationURI: string,
      status: BigNumberish,
      expiry: BigNumberish,
      assets: CurationAssetStruct[]
    ],
    [bigint],
    "payable"
  >;

  curationData: TypedContractMethod<
    [curationId: BigNumberish],
    [CurationDataStructOutput],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  initialize: TypedContractMethod<
    [name: string, symbol: string, manager: AddressLike],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeAssets: TypedContractMethod<
    [curationId: BigNumberish, hubs: AddressLike[], assetIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setCurationURI: TypedContractMethod<
    [curationId: BigNumberish, curationURI: string],
    [void],
    "nonpayable"
  >;

  setExpiry: TypedContractMethod<
    [curationId: BigNumberish, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStatus: TypedContractMethod<
    [curationId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAssets"
  ): TypedContractMethod<
    [curationId: BigNumberish, assets: CurationAssetStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveAsset"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      hub: AddressLike,
      assetId: BigNumberish,
      status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveAssetBatch"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      hubs: AddressLike[],
      assetIds: BigNumberish[],
      status: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetsStatus"
  ): TypedContractMethod<
    [curationId: BigNumberish, hubs: AddressLike[], assetIds: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "create"
  ): TypedContractMethod<
    [
      curationURI: string,
      status: BigNumberish,
      expiry: BigNumberish,
      assets: CurationAssetStruct[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "curationData"
  ): TypedContractMethod<
    [curationId: BigNumberish],
    [CurationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [name: string, symbol: string, manager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAssets"
  ): TypedContractMethod<
    [curationId: BigNumberish, hubs: AddressLike[], assetIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCurationURI"
  ): TypedContractMethod<
    [curationId: BigNumberish, curationURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpiry"
  ): TypedContractMethod<
    [curationId: BigNumberish, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStatus"
  ): TypedContractMethod<
    [curationId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "AssetApproved"
  ): TypedContractEvent<
    AssetApprovedEvent.InputTuple,
    AssetApprovedEvent.OutputTuple,
    AssetApprovedEvent.OutputObject
  >;
  getEvent(
    key: "AssetsAdded"
  ): TypedContractEvent<
    AssetsAddedEvent.InputTuple,
    AssetsAddedEvent.OutputTuple,
    AssetsAddedEvent.OutputObject
  >;
  getEvent(
    key: "AssetsRemoved"
  ): TypedContractEvent<
    AssetsRemovedEvent.InputTuple,
    AssetsRemovedEvent.OutputTuple,
    AssetsRemovedEvent.OutputObject
  >;
  getEvent(
    key: "CurationCreated"
  ): TypedContractEvent<
    CurationCreatedEvent.InputTuple,
    CurationCreatedEvent.OutputTuple,
    CurationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CurationUpdated"
  ): TypedContractEvent<
    CurationUpdatedEvent.InputTuple,
    CurationUpdatedEvent.OutputTuple,
    CurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "AssetApproved(uint256,address,uint256,uint8,uint256)": TypedContractEvent<
      AssetApprovedEvent.InputTuple,
      AssetApprovedEvent.OutputTuple,
      AssetApprovedEvent.OutputObject
    >;
    AssetApproved: TypedContractEvent<
      AssetApprovedEvent.InputTuple,
      AssetApprovedEvent.OutputTuple,
      AssetApprovedEvent.OutputObject
    >;

    "AssetsAdded(uint256,tuple[])": TypedContractEvent<
      AssetsAddedEvent.InputTuple,
      AssetsAddedEvent.OutputTuple,
      AssetsAddedEvent.OutputObject
    >;
    AssetsAdded: TypedContractEvent<
      AssetsAddedEvent.InputTuple,
      AssetsAddedEvent.OutputTuple,
      AssetsAddedEvent.OutputObject
    >;

    "AssetsRemoved(uint256,address[],uint256[])": TypedContractEvent<
      AssetsRemovedEvent.InputTuple,
      AssetsRemovedEvent.OutputTuple,
      AssetsRemovedEvent.OutputObject
    >;
    AssetsRemoved: TypedContractEvent<
      AssetsRemovedEvent.InputTuple,
      AssetsRemovedEvent.OutputTuple,
      AssetsRemovedEvent.OutputObject
    >;

    "CurationCreated(address,uint256,string,uint8,uint256,tuple[])": TypedContractEvent<
      CurationCreatedEvent.InputTuple,
      CurationCreatedEvent.OutputTuple,
      CurationCreatedEvent.OutputObject
    >;
    CurationCreated: TypedContractEvent<
      CurationCreatedEvent.InputTuple,
      CurationCreatedEvent.OutputTuple,
      CurationCreatedEvent.OutputObject
    >;

    "CurationUpdated(uint256,string,uint8,uint256)": TypedContractEvent<
      CurationUpdatedEvent.InputTuple,
      CurationUpdatedEvent.OutputTuple,
      CurationUpdatedEvent.OutputObject
    >;
    CurationUpdated: TypedContractEvent<
      CurationUpdatedEvent.InputTuple,
      CurationUpdatedEvent.OutputTuple,
      CurationUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
