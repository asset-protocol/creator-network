/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type LiteHubInfoStruct = {
  createModule: AddressLike;
  tokenCollectModule: AddressLike;
  feeCollectModule: AddressLike;
  nftGatedModule: AddressLike;
};

export type LiteHubInfoStructOutput = [
  createModule: string,
  tokenCollectModule: string,
  feeCollectModule: string,
  nftGatedModule: string
] & {
  createModule: string;
  tokenCollectModule: string;
  feeCollectModule: string;
  nftGatedModule: string;
};

export type HubCreateDataStruct = {
  admin: AddressLike;
  name: string;
  createModule: AddressLike;
};

export type HubCreateDataStructOutput = [
  admin: string,
  name: string,
  createModule: string
] & { admin: string; name: string; createModule: string };

export type MangerInitDataStruct = {
  assetHubImpl: AddressLike;
  tokenCreateModule: AddressLike;
  collectNFT: AddressLike;
  feeCollectModule: AddressLike;
  tokenCollectModule: AddressLike;
  nftGatedModule: AddressLike;
};

export type MangerInitDataStructOutput = [
  assetHubImpl: string,
  tokenCreateModule: string,
  collectNFT: string,
  feeCollectModule: string,
  tokenCollectModule: string,
  nftGatedModule: string
] & {
  assetHubImpl: string;
  tokenCreateModule: string;
  collectNFT: string;
  feeCollectModule: string;
  tokenCollectModule: string;
  nftGatedModule: string;
};

export declare namespace LiteHubManagerBase {
  export type HubModulesStorageStruct = {
    tokenCreateModule: AddressLike;
    collectNFT: AddressLike;
    feeCollectModule: AddressLike;
    tokenCollectModule: AddressLike;
    nftGatedModule: AddressLike;
  };

  export type HubModulesStorageStructOutput = [
    tokenCreateModule: string,
    collectNFT: string,
    feeCollectModule: string,
    tokenCollectModule: string,
    nftGatedModule: string
  ] & {
    tokenCreateModule: string;
    collectNFT: string;
    feeCollectModule: string;
    tokenCollectModule: string;
    nftGatedModule: string;
  };
}

export interface LiteAssetHubManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "assetHubImpl"
      | "assetHubInfo"
      | "assetHubInfoByName"
      | "canCreateHub"
      | "creatorNFT"
      | "curation"
      | "deploy"
      | "globalModule"
      | "hasNamedHub"
      | "hubDefaultModules"
      | "implementation"
      | "initialize"
      | "isHub"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setCuration"
      | "setGlobalModule"
      | "setHubCreatorNFT"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetHubDeployed"
      | "CurationUpdated"
      | "GlobalModuleChanged"
      | "HubCreatorNFTChanged"
      | "Initialized"
      | "MultipleUpgraded"
      | "OwnershipTransferred"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetHubImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetHubInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetHubInfoByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canCreateHub",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "curation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [HubCreateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "globalModule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasNamedHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hubDefaultModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [MangerInitDataStruct, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isHub", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCuration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHubCreatorNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetHubImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetHubInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetHubInfoByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canCreateHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creatorNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasNamedHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hubDefaultModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHubCreatorNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AssetHubDeployedEvent {
  export type InputTuple = [
    admin: AddressLike,
    name: string,
    assetHub: AddressLike,
    data: LiteHubInfoStruct
  ];
  export type OutputTuple = [
    admin: string,
    name: string,
    assetHub: string,
    data: LiteHubInfoStructOutput
  ];
  export interface OutputObject {
    admin: string;
    name: string;
    assetHub: string;
    data: LiteHubInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurationUpdatedEvent {
  export type InputTuple = [curation: AddressLike];
  export type OutputTuple = [curation: string];
  export interface OutputObject {
    curation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalModuleChangedEvent {
  export type InputTuple = [globalModule: AddressLike];
  export type OutputTuple = [globalModule: string];
  export interface OutputObject {
    globalModule: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HubCreatorNFTChangedEvent {
  export type InputTuple = [creatorNFT: AddressLike];
  export type OutputTuple = [creatorNFT: string];
  export interface OutputObject {
    creatorNFT: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultipleUpgradedEvent {
  export type InputTuple = [index: BigNumberish, implementation: AddressLike];
  export type OutputTuple = [index: bigint, implementation: string];
  export interface OutputObject {
    index: bigint;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiteAssetHubManager extends BaseContract {
  connect(runner?: ContractRunner | null): LiteAssetHubManager;
  waitForDeployment(): Promise<this>;

  interface: LiteAssetHubManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  assetHubImpl: TypedContractMethod<[], [string], "view">;

  assetHubInfo: TypedContractMethod<
    [hub: AddressLike],
    [LiteHubInfoStructOutput],
    "view"
  >;

  assetHubInfoByName: TypedContractMethod<
    [name: string],
    [LiteHubInfoStructOutput],
    "view"
  >;

  canCreateHub: TypedContractMethod<
    [account: AddressLike],
    [[boolean, string]],
    "view"
  >;

  creatorNFT: TypedContractMethod<[], [string], "view">;

  curation: TypedContractMethod<[], [string], "view">;

  deploy: TypedContractMethod<
    [data: HubCreateDataStruct],
    [string],
    "nonpayable"
  >;

  globalModule: TypedContractMethod<[], [string], "view">;

  hasNamedHub: TypedContractMethod<[name: string], [boolean], "view">;

  hubDefaultModules: TypedContractMethod<
    [],
    [LiteHubManagerBase.HubModulesStorageStructOutput],
    "view"
  >;

  implementation: TypedContractMethod<[index: BigNumberish], [string], "view">;

  initialize: TypedContractMethod<
    [
      data: MangerInitDataStruct,
      creatorNFT_: AddressLike,
      globalModule_: AddressLike,
      curation_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isHub: TypedContractMethod<[hub: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCuration: TypedContractMethod<
    [curation_: AddressLike],
    [void],
    "nonpayable"
  >;

  setGlobalModule: TypedContractMethod<[gm: AddressLike], [void], "nonpayable">;

  setHubCreatorNFT: TypedContractMethod<
    [creatorNFT_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetHubImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetHubInfo"
  ): TypedContractMethod<[hub: AddressLike], [LiteHubInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "assetHubInfoByName"
  ): TypedContractMethod<[name: string], [LiteHubInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "canCreateHub"
  ): TypedContractMethod<[account: AddressLike], [[boolean, string]], "view">;
  getFunction(
    nameOrSignature: "creatorNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "curation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<[data: HubCreateDataStruct], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "globalModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasNamedHub"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "hubDefaultModules"
  ): TypedContractMethod<
    [],
    [LiteHubManagerBase.HubModulesStorageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      data: MangerInitDataStruct,
      creatorNFT_: AddressLike,
      globalModule_: AddressLike,
      curation_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isHub"
  ): TypedContractMethod<[hub: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCuration"
  ): TypedContractMethod<[curation_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGlobalModule"
  ): TypedContractMethod<[gm: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHubCreatorNFT"
  ): TypedContractMethod<[creatorNFT_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AssetHubDeployed"
  ): TypedContractEvent<
    AssetHubDeployedEvent.InputTuple,
    AssetHubDeployedEvent.OutputTuple,
    AssetHubDeployedEvent.OutputObject
  >;
  getEvent(
    key: "CurationUpdated"
  ): TypedContractEvent<
    CurationUpdatedEvent.InputTuple,
    CurationUpdatedEvent.OutputTuple,
    CurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalModuleChanged"
  ): TypedContractEvent<
    GlobalModuleChangedEvent.InputTuple,
    GlobalModuleChangedEvent.OutputTuple,
    GlobalModuleChangedEvent.OutputObject
  >;
  getEvent(
    key: "HubCreatorNFTChanged"
  ): TypedContractEvent<
    HubCreatorNFTChangedEvent.InputTuple,
    HubCreatorNFTChangedEvent.OutputTuple,
    HubCreatorNFTChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MultipleUpgraded"
  ): TypedContractEvent<
    MultipleUpgradedEvent.InputTuple,
    MultipleUpgradedEvent.OutputTuple,
    MultipleUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AssetHubDeployed(address,string,address,tuple)": TypedContractEvent<
      AssetHubDeployedEvent.InputTuple,
      AssetHubDeployedEvent.OutputTuple,
      AssetHubDeployedEvent.OutputObject
    >;
    AssetHubDeployed: TypedContractEvent<
      AssetHubDeployedEvent.InputTuple,
      AssetHubDeployedEvent.OutputTuple,
      AssetHubDeployedEvent.OutputObject
    >;

    "CurationUpdated(address)": TypedContractEvent<
      CurationUpdatedEvent.InputTuple,
      CurationUpdatedEvent.OutputTuple,
      CurationUpdatedEvent.OutputObject
    >;
    CurationUpdated: TypedContractEvent<
      CurationUpdatedEvent.InputTuple,
      CurationUpdatedEvent.OutputTuple,
      CurationUpdatedEvent.OutputObject
    >;

    "GlobalModuleChanged(address)": TypedContractEvent<
      GlobalModuleChangedEvent.InputTuple,
      GlobalModuleChangedEvent.OutputTuple,
      GlobalModuleChangedEvent.OutputObject
    >;
    GlobalModuleChanged: TypedContractEvent<
      GlobalModuleChangedEvent.InputTuple,
      GlobalModuleChangedEvent.OutputTuple,
      GlobalModuleChangedEvent.OutputObject
    >;

    "HubCreatorNFTChanged(address)": TypedContractEvent<
      HubCreatorNFTChangedEvent.InputTuple,
      HubCreatorNFTChangedEvent.OutputTuple,
      HubCreatorNFTChangedEvent.OutputObject
    >;
    HubCreatorNFTChanged: TypedContractEvent<
      HubCreatorNFTChangedEvent.InputTuple,
      HubCreatorNFTChangedEvent.OutputTuple,
      HubCreatorNFTChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MultipleUpgraded(uint256,address)": TypedContractEvent<
      MultipleUpgradedEvent.InputTuple,
      MultipleUpgradedEvent.OutputTuple,
      MultipleUpgradedEvent.OutputObject
    >;
    MultipleUpgraded: TypedContractEvent<
      MultipleUpgradedEvent.InputTuple,
      MultipleUpgradedEvent.OutputTuple,
      MultipleUpgradedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
