/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AssetHubInfoStruct = {
  collectNFT: AddressLike;
  nftGatedModule: AddressLike;
  assetCreateModule: AddressLike;
  tokenCollectModule: AddressLike;
  feeCollectModule: AddressLike;
};

export type AssetHubInfoStructOutput = [
  collectNFT: string,
  nftGatedModule: string,
  assetCreateModule: string,
  tokenCollectModule: string,
  feeCollectModule: string
] & {
  collectNFT: string;
  nftGatedModule: string;
  assetCreateModule: string;
  tokenCollectModule: string;
  feeCollectModule: string;
};

export type AssetHubDeployDataStruct = {
  admin: AddressLike;
  name: string;
  collectNft: boolean;
  assetCreateModule: AddressLike;
};

export type AssetHubDeployDataStructOutput = [
  admin: string,
  name: string,
  collectNft: boolean,
  assetCreateModule: string
] & {
  admin: string;
  name: string;
  collectNft: boolean;
  assetCreateModule: string;
};

export type AssetHubImplDataStruct = {
  assetHubFactory: AddressLike;
  tokenCollectModuleFactory: AddressLike;
  nftGatedModuleFactory: AddressLike;
  tokenAssetCreateModuleFactory: AddressLike;
  collectNFTFactory: AddressLike;
  feeCollectModuleFactory: AddressLike;
};

export type AssetHubImplDataStructOutput = [
  assetHubFactory: string,
  tokenCollectModuleFactory: string,
  nftGatedModuleFactory: string,
  tokenAssetCreateModuleFactory: string,
  collectNFTFactory: string,
  feeCollectModuleFactory: string
] & {
  assetHubFactory: string;
  tokenCollectModuleFactory: string;
  nftGatedModuleFactory: string;
  tokenAssetCreateModuleFactory: string;
  collectNFTFactory: string;
  feeCollectModuleFactory: string;
};

export interface AssetHubManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "assetHubInfo"
      | "assetHubInfoByName"
      | "createFeeCollectModuleImpl"
      | "createHubImpl"
      | "createNftAssetGatedModuleImpl"
      | "createTokenAssetCreateModule"
      | "createTokenCollectModuleImpl"
      | "deploy"
      | "exitsName"
      | "factories"
      | "initialize"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setFactories"
      | "setWhitelist"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "version"
      | "whitelisted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetHubDeployed"
      | "Initialized"
      | "OwnershipTransferred"
      | "Upgraded"
      | "Whitelisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetHubInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetHubInfoByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createFeeCollectModuleImpl",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createHubImpl",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createNftAssetGatedModuleImpl",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenAssetCreateModule",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenCollectModuleImpl",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [AssetHubDeployDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "exitsName", values: [string]): string;
  encodeFunctionData(functionFragment: "factories", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AssetHubImplDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFactories",
    values: [AssetHubImplDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelisted",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetHubInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetHubInfoByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFeeCollectModuleImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHubImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNftAssetGatedModuleImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenAssetCreateModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenCollectModuleImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitsName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factories", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;
}

export namespace AssetHubDeployedEvent {
  export type InputTuple = [
    admin: AddressLike,
    name: string,
    assetHub: AddressLike,
    data: AssetHubInfoStruct
  ];
  export type OutputTuple = [
    admin: string,
    name: string,
    assetHub: string,
    data: AssetHubInfoStructOutput
  ];
  export interface OutputObject {
    admin: string;
    name: string;
    assetHub: string;
    data: AssetHubInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedEvent {
  export type InputTuple = [account: AddressLike, isWhitelisted: boolean];
  export type OutputTuple = [account: string, isWhitelisted: boolean];
  export interface OutputObject {
    account: string;
    isWhitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssetHubManager extends BaseContract {
  connect(runner?: ContractRunner | null): AssetHubManager;
  waitForDeployment(): Promise<this>;

  interface: AssetHubManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  assetHubInfo: TypedContractMethod<
    [hub: AddressLike],
    [AssetHubInfoStructOutput],
    "view"
  >;

  assetHubInfoByName: TypedContractMethod<
    [name: string],
    [AssetHubInfoStructOutput],
    "view"
  >;

  createFeeCollectModuleImpl: TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;

  createHubImpl: TypedContractMethod<
    [initData: BytesLike],
    [string],
    "nonpayable"
  >;

  createNftAssetGatedModuleImpl: TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;

  createTokenAssetCreateModule: TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;

  createTokenCollectModuleImpl: TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;

  deploy: TypedContractMethod<
    [data: AssetHubDeployDataStruct],
    [string],
    "nonpayable"
  >;

  exitsName: TypedContractMethod<[name: string], [boolean], "view">;

  factories: TypedContractMethod<[], [AssetHubImplDataStructOutput], "view">;

  initialize: TypedContractMethod<
    [data: AssetHubImplDataStruct],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFactories: TypedContractMethod<
    [data: AssetHubImplDataStruct],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [account: AddressLike, whitelist: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  whitelisted: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetHubInfo"
  ): TypedContractMethod<
    [hub: AddressLike],
    [AssetHubInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "assetHubInfoByName"
  ): TypedContractMethod<[name: string], [AssetHubInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "createFeeCollectModuleImpl"
  ): TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createHubImpl"
  ): TypedContractMethod<[initData: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createNftAssetGatedModuleImpl"
  ): TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTokenAssetCreateModule"
  ): TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTokenCollectModuleImpl"
  ): TypedContractMethod<
    [hub: AddressLike, initData: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [data: AssetHubDeployDataStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitsName"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "factories"
  ): TypedContractMethod<[], [AssetHubImplDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[data: AssetHubImplDataStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFactories"
  ): TypedContractMethod<[data: AssetHubImplDataStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [account: AddressLike, whitelist: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelisted"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;

  getEvent(
    key: "AssetHubDeployed"
  ): TypedContractEvent<
    AssetHubDeployedEvent.InputTuple,
    AssetHubDeployedEvent.OutputTuple,
    AssetHubDeployedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Whitelisted"
  ): TypedContractEvent<
    WhitelistedEvent.InputTuple,
    WhitelistedEvent.OutputTuple,
    WhitelistedEvent.OutputObject
  >;

  filters: {
    "AssetHubDeployed(address,string,address,tuple)": TypedContractEvent<
      AssetHubDeployedEvent.InputTuple,
      AssetHubDeployedEvent.OutputTuple,
      AssetHubDeployedEvent.OutputObject
    >;
    AssetHubDeployed: TypedContractEvent<
      AssetHubDeployedEvent.InputTuple,
      AssetHubDeployedEvent.OutputTuple,
      AssetHubDeployedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "Whitelisted(address,bool)": TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
    Whitelisted: TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
  };
}
