/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type TokenFeeConfigDataStruct = {
  exist: boolean;
  collectFee: BigNumberish;
  createFee: BigNumberish;
  updateFee: BigNumberish;
};

export type TokenFeeConfigDataStructOutput = [
  exist: boolean,
  collectFee: bigint,
  createFee: bigint,
  updateFee: bigint
] & {
  exist: boolean;
  collectFee: bigint;
  createFee: bigint;
  updateFee: bigint;
};

export type TokenFeeConfigStruct = {
  collectFee: BigNumberish;
  createFee: BigNumberish;
  updateFee: BigNumberish;
};

export type TokenFeeConfigStructOutput = [
  collectFee: bigint,
  createFee: bigint,
  updateFee: bigint
] & { collectFee: bigint; createFee: bigint; updateFee: bigint };

export declare namespace DataTypes {
  export type AssetCreateDataStruct = {
    publisher: AddressLike;
    contentURI: string;
    assetCreateModuleData: BytesLike;
    collectModule: AddressLike;
    collectModuleInitData: BytesLike;
    gatedModule: AddressLike;
    gatedModuleInitData: BytesLike;
  };

  export type AssetCreateDataStructOutput = [
    publisher: string,
    contentURI: string,
    assetCreateModuleData: string,
    collectModule: string,
    collectModuleInitData: string,
    gatedModule: string,
    gatedModuleInitData: string
  ] & {
    publisher: string;
    contentURI: string;
    assetCreateModuleData: string;
    collectModule: string;
    collectModuleInitData: string;
    gatedModule: string;
    gatedModuleInitData: string;
  };
}

export interface TokenGlobalModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "config"
      | "initialize"
      | "onCollect"
      | "onCreateAsset"
      | "onUpdate"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setCollectFee"
      | "setCreateFee"
      | "setDefaultConfig"
      | "setHubConfig"
      | "setRecipient"
      | "setToken"
      | "setUpdateFee"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred" | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "config", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, TokenFeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onCollect",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onCreateAsset",
    values: [AddressLike, BigNumberish, DataTypes.AssetCreateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onUpdate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreateFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultConfig",
    values: [TokenFeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setHubConfig",
    values: [AddressLike, TokenFeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onCollect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onCreateAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHubConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenGlobalModule extends BaseContract {
  connect(runner?: ContractRunner | null): TokenGlobalModule;
  waitForDeployment(): Promise<this>;

  interface: TokenGlobalModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  config: TypedContractMethod<
    [hub: AddressLike],
    [TokenFeeConfigDataStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [manager: AddressLike, token: AddressLike, feeConfig: TokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;

  onCollect: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: AddressLike,
      collector: AddressLike,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  onCreateAsset: TypedContractMethod<
    [
      publisher: AddressLike,
      arg1: BigNumberish,
      arg2: DataTypes.AssetCreateDataStruct
    ],
    [void],
    "nonpayable"
  >;

  onUpdate: TypedContractMethod<
    [publisher: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCollectFee: TypedContractMethod<
    [hub: AddressLike, collectFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCreateFee: TypedContractMethod<
    [hub: AddressLike, createFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultConfig: TypedContractMethod<
    [feeConfig: TokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;

  setHubConfig: TypedContractMethod<
    [hub: AddressLike, feeConfig: TokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;

  setRecipient: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  setUpdateFee: TypedContractMethod<
    [hub: AddressLike, updateFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [hub: AddressLike],
    [TokenFeeConfigDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [manager: AddressLike, token: AddressLike, feeConfig: TokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onCollect"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: AddressLike,
      collector: AddressLike,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onCreateAsset"
  ): TypedContractMethod<
    [
      publisher: AddressLike,
      arg1: BigNumberish,
      arg2: DataTypes.AssetCreateDataStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onUpdate"
  ): TypedContractMethod<
    [publisher: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectFee"
  ): TypedContractMethod<
    [hub: AddressLike, collectFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreateFee"
  ): TypedContractMethod<
    [hub: AddressLike, createFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultConfig"
  ): TypedContractMethod<
    [feeConfig: TokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHubConfig"
  ): TypedContractMethod<
    [hub: AddressLike, feeConfig: TokenFeeConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRecipient"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUpdateFee"
  ): TypedContractMethod<
    [hub: AddressLike, updateFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
